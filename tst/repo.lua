local luagi = require("luagi")
local test_helper = require("test_helper")
describe( "with test_repo", function()
   local repo = nil
   local err = nil
   setup(function()
      test_helper.setup()
      repo, err = luagi.open( test_helper.path )
   end)
   it( "should open the repo", function()
      assert.is.falsy( err )
      assert.is.not_nil( repo )
   end)

   describe( "index #repo", function()
      local index = nil
      setup( function()
          index, err = repo:index()
      end)
      it( "should open an index", function()
         assert.is.falsy( err )
         assert.is.not_nil( index )
         assert.are.equal( "userdata", type( index ) )
         assert.has_no_error( function() index:owner() end)
      end)
   end)
   describe( "head #repo", function()
      local head = nil
      setup( function()
         head, err = repo:head()
      end)
      it( "should return the head", function()
         assert.is.falsy( err )
         assert.is.not_nil( head )
         assert.are.equal( "userdata", type( head ) )
         assert.has_no_error( function() head:name() end)
      end)
   end)
   describe( "is_head_detached #repo", function()
      it("should return false", function()
         assert.is.False( repo:is_head_detached() )
      end)
   end)
   describe( "is_head_unborn #repo", function()
      it("should return false", function()
         assert.is.False( repo:is_head_unborn() )
      end)
   end)
   describe( "is_empty #repo", function()
      it("should return false", function()
         assert.is.False( repo:is_empty() )
      end)
   end)
   describe( "is_bare #repo", function()
      it("should return false", function()
         assert.is.False( repo:is_bare() )
      end)
   end)
   describe( "is_shallow #repo", function()
      it("should return false", function()
         assert.is.False( repo:is_shallow() )
      end)
   end)
   describe( "path #repo", function()
      it("should have the testhelper path", function()
         assert.is.not_nil( repo:path():find( test_helper.path ))
      end)
   end)
   describe( "workdir #repo", function()
      it("should have the testhelper path", function()
         assert.is.not_nil( repo:path():find( test_helper.path ))
      end)
   end)
   describe( "config #repo", function()
      local config = nil
      setup(function()
         config, err = repo:config()
      end)

      it( "should return a config", function()
         assert.is.falsy( err )
         assert.is.not_nil( config )
         assert.are.equal( "userdata", type( config ) )
         assert.has_no_error( function() config:refresh() end)
      end)
   end)
   describe( "odb #repo", function()
      local odb = nil
      setup(function()
         odb, err = repo:odb()
      end)

      it( "should return an odb", function()
         assert.is.falsy( err )
         assert.is.not_nil( odb )
         assert.are.equal( "userdata", type( odb ) )
         assert.has_no_error( function() odb:refresh() end)
      end)
    end)
   describe( "refdb #repo", function()
      local refdb = nil
      setup(function()
         odb, err = repo:refdb()
      end)

      it( "should return a refdb", function()
         assert.is.falsy( err )
         assert.is.not_nil( refdb )
         assert.are.equal( "userdata", type( refdb ) )
      end)
   end)
end)

describe( "set_workdir #repo", function() pending("luagi_repository_set_workdir") end)
describe( "config_snapshot #repo", function() pending("luagi_repository_config_snapshot") end)
describe( "message #repo", function() pending("luagi_repository_message") end)
describe( "remove_message #repo", function() pending("luagi_repository_message_remove") end)
describe( "cleanup_state #repo", function() pending("luagi_repository_state_cleanup") end)
describe( "foreach_fetchhead #repo", function() pending("luagi_repository_fetchhead_foreach") end)
describe( "foreach_mergehead #repo", function() pending("luagi_repository_mergehead_foreach") end)
describe( "hashfile #repo", function() pending("luagi_repository_hashfile") end)
describe( "set_head #repo", function() pending("luagi_repository_set_head") end)
describe( "set_head_detached #repo", function() pending("luagi_repository_set_head_detached") end)
describe( "detach_head #repo", function() pending("luagi_repository_detach_head") end)
describe( "state #repo", function() pending("luagi_repository_state") end)
describe( "set_namespace #repo", function() pending("luagi_repository_set_namespace") end)
describe( "get_namespache #repo", function() pending("luagi_repository_get_namespace") end)
